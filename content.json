[{"title":"Linux下redis的读写分离配置和高可用环境配置","date":"2019-01-04T12:36:40.000Z","path":"p/9227d01/","text":"Linux下redis的读写分离配置和高可用环境配置因为高可用和主备切换需要多台服务器,准备不了那么多服务器所以本文中的多台服务器是利用一台服务器的多端口模拟多台服务器实现的 redis 服务器三台 123192.168.230.221 6379(master-主服务器)192.168.230.221 6380(slave-从服务器)192.168.230.221 6381(slave-从服务器) Sentinel 哨兵服务器三台 123192.168.230.221 26379192.168.230.221 26380192.168.230.221 26381 1、redis的安装redis官方网站:http://www.redis.cn 1)、下载并解压redis进入到指定目录,这里我下载到/usr/soft/redis目录 123cd /usr/soft/rediswget http://download.redis.io/releases/redis-5.0.3.tar.gztar zxf redis-redis-5.0.3.tar.gz 解压之后redis目录下就会出现redis-5.0.3文件夹,cd进入这个文件夹, 因为redis是用C语言写的,所以在运行前需要对源码文件进行编译才能运行 如果你的系统里面已经有了GCC的编译环境,那么你可以直接编译,没有的话就需要安装GCC的编译环境进行对redis的源码进行编译, 1yum install gcc 安装成功之后就可以进行编译了,一定要在redis的根目录进行编译 1make 如果在编译过程中出现了command not found错误,则是没有安装GCC编译环境,重新安装完编译环境后一定要删除解压后的文件重新解压编译,不然会出错 编译完成后,src目录中就会出现这些可执行文件就说明你的redis服务器安装成功了 2、配置redis主服务器redis的配置文件是存放在根目录的redis.conf文件启动redis之前我们修改一些配置文件 1vim redis.conf 123456#bind 127.0.0.1 #注释此配置,允许该服务器所有IP都能访问到Redis服务port 6379 #Redis服务的端口,默认是6379。可不修改daemonize yes #以守护进程模式启动redis,这样启动之后reids就不会占用当前连接databases 16 #默认redis服务器的库数量requirepass \"123456\" #设置redis的访问密码masterauth \"123456\" #设置从服务器访问主服务器的访问密码 3、配置redis从服务器由于是单机多端口模拟多台服务器,所以需要将redis的文件夹拷贝两份 12cp -r redis-5.0.3 redis-6380cp -r redis-5.0.3 redis-6381 分别进入这两个文件夹进行配置文件修改 12cd redis-6380vim redis.conf 123456#bind 127.0.0.1 #注释此配置,允许该服务器所有IP都能访问到Redis服务port 6380 #Redis服务的端口,进入redis-6381文件夹时端口改为6381,确保端口不冲突daemonize yes #以守护进程模式启动redis,这样启动之后reids就不会占用当前连接requirepass \"123456\" #设置redis的访问密码masterauth \"123456\" #设置从服务器访问主服务器的访问密码replicaof 192.168.230.220 6379 #设置主服务器IP地址及端口 低版本的redis设置服务器的配置项是:slaveof 192.168.230.220 6379,经测试,高版本设置这个属性也可以正常连接 保存退出,然后在各个redis的根目录启动redis服务器 启动redis服务器就是执行src文件夹中redis-server.sh的可以执行文件进行启动,同时显式的指定配置文件 4、启动服务器启动主服务器 12cd redis-5.0.3src/redis-server redis.conf 启动两个从服务器 1234cd ../redis-6380src/redis-server redis.confcd ../redis-6381src/redis-server redis.conf 查看服务器启动情况 1ps -ef|grep redis 此时你的redis服务已经启动成功了,然后就可以用客户端进行连接了 接着执行客户端启动脚本,连接的时候利用-a指定密码,-p指定端口(如果是默认端口6379可不写) 1src/redis-cli -a 123456 -p 6379 当你看着这个的时候说明redis连接成功了,此时你可以在这里输入reids命令进行操作 因为客户端会占用当前连接,所以我们需要另开一个ssh连接进行从服务器的客户端连接 此时在主服务器客户端(也就是6379端口的服务器)中查看从服务器的连接情况 1info replication 此时说明两台从服务器已经连接上了主服务器了,当然你也可以在从服务器的客户端查看主服务器的情况 1info replication 123master_host:192.168.230.221 主服务器IPmaster_port:6379 主服务器端口master_link_status:up 主服务器是否在线(up为在线,down为离线) 此时redis服务器的读写分离环境已经搭建完成 主服务器读写测试 从服务器读测试,此时从服务器可以直接读取到在主服务器添加的数据, 而在从服务器添加数据,则会提示从服务器是只读的 5、准备Sentinel 哨兵服务器回到redis根目录的上一级,我的目录结构是:/usr/soft/redis/,redis目录用来存放各个redis服务器.所以回到redis目录拷贝 123cp -r redis-6379 redis-26379cp -r redis-6379 redis-26380cp -r redis-6379 redis-26381 最终你的redis文件夹应该有这六个文件,说明你的sentinel服务器已经准备好了.剩下的就是修改配置了 哨兵服务器用的配置文件和redis服务器不一样,哨兵服务器用的是sentinel.conf 依次cd进入各个文件夹修改配置文件 12cd redis-26379vim sentinel.conf 123456789port 26379 # 哨兵服务器端口# mymaster为redis主服务器别名,192.168.230.221为主服务器IP,6379为主服务器端口,2为哨兵切换主备投票的最低票# 数,计算公式为(哨兵服务器数量+1)/2sentinel monitor mymaster 192.168.230.221 6379 2sentinel auth-pass mymaster 123456 # mymaster为上面设置的别名,123456为连接主服务器需要的访问密码# sentinel在该配置值内未能完成failover操作（即故障时master/slave自动切换),则认为本次failover失败# 默认值为900000毫秒,可根据实际情况修改sentinel failover-timeout mymaster 900000sentinel down-after-milliseconds mymaster 30000 # sentinel认为redis服务器已经断线所需的毫秒数 配置到这里,基本上sentinel服务器已经配置好了,剩下的就是依次进入26380和26381文件夹修改对应的配置,注意更换端口,不然启动时会端口冲突 配置完成之后,启动就变得很简单了,由于没有配置sentinel的后台启动,所以每个服务器都会占用一个连接,就需要多开连接进行了 12cd /redis-26379src/redis-sentinel sentinel.conf 如果你能看到这个经典的启动界面,说明你的sentinel服务器已经启动了,你离成功也就差几个命令了 在新开的连接窗口,进入sentinel服务器根目录 12cd /usr/soft/redis/redis-26380src/redis-sentinel sentinel.conf 启动成功之后,你能看到启动界面,并且能打印之前我们启动的那台sentinel服务器信息,说明这台sentinel也已经启动成功了 并且之前启动的端口号为26379的那台sentinel服务器也会打印这台服务器信息 说明两天sentinel服务器已经正常监听了6379的redis主服务器,并且两台sentinel也建立了通信 如果新开的sentinel服务器显示redis主服务器离线,并且也没有打印26379的服务器信息,说明服务器的配置处理问题重点检查是否配置了redis主服务器的验证密码,redis主服务器的IP端口是否正确 剩下的就是按照以上步骤,启动端口为26381的sentinel服务器. 12cd /usr/soft/redis/redis-26381src/redis-sentinel sentinel.conf 如果你能在之前启动的两台服务器日志里看到26381的日志打印信息,说明服务器启动成功. 这时,你的Linux下的redis读写分离和高可用的环境已经搭建完成,当有主服务器宕机之后,sentinel服务器会自动选举出新的服务器并且进行切换,宕机的服务器重新上线后会自动作为从服务器加入集群环境.","tags":[{"name":"redis","slug":"redis","permalink":"https://siworae.github.io/tags/redis/"}]},{"title":"windows下的hexo+GitHub个人博客搭建","date":"2019-01-04T11:39:41.219Z","path":"p/ae3b3943/","text":"windows下的hexo+GitHub个人博客搭建1、node.js的下载与安装1)、下载node.js去node的官方网站下载windows版本的zip文件node.js的官方下载连接 下载后解压至任意目录 在解压后目录中新建两个文件夹(用来存放npm全局模块的安装目录,也可以指定其他目录 node-cachenode-global 2)、配置环境变量新建NODE_HOME12变量名:NODE_HOME变量值:C:\\Java\\node-v10.15.0-win-x64(路径为解压node后存放的根目录) 配置path12%NODE_HOME%%NODE_HOME%\\node-global 3)、设置node12npm config set prefix \"C:\\Java\\node-v10.15.0-win-x64\\node-global\"npm config set cache \"C:\\Java\\node-v10.15.0-win-x64\\node-cache\" 地址为安装目录 4)、设置npm国内源1npm config set registry \"https://registry.npm.taobao.org\" 5)、测试12node -vnpm -v 1234C:\\Users\\siworae&gt;node -vv10.15.0C:\\Users\\siworae&gt;npm -v6.4.1 出现这个则说明安装成功 2、安装gitgit下载地址:https://www.git-scm.com/download/ 去git官网下载相对于的版本进行安装 安装成功后可以通过git –version测试是否安装成功 12C:\\Users\\siworae&gt;git --versiongit version 2.10.2.windows.1 3、注册GitHub账号和创建GitHub仓库在GitHub官网注册GitHub账号 1)、创建仓库 创建git仓库时候，仓库的名称有格式要求，例如我的GitHub仓库用户名是siworae,仓库名称就是siworae.github.io 然后点击下面的create repository就可以成功创建GitHub仓库了,创建完之后会跳转到一个新的界面,不要关闭.留着它 4、安装hexohexo官方中文文档:https://hexo.io/zh-cn/docs/index.html hexo中的命令介绍 1234hexo g #完整命令为hexo generate，用于生成静态文件 hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览 hexo d #完整命令为hexo deploy，用于将本地文件发布到github上 hexo n #完整命令为hexo new，用于新建一篇文章 1、安装hexo 在任意目录新建hexo文件夹(名字任意),我在C盘中新建了一个hexo文件夹,进入这个文件夹,鼠标右键选择”Git Bash here”进入git命令行窗口,执行以下命令安装hexo和git依赖 文中所有路径都尽量不要包含中文路径,不然很容易出现各种稀奇古怪的错误 12npm install hexo-cli -gnpm install hexo-deployer-git --save 初始化hexo 1hexo init 安装依赖 1npm insatll 生成静态文件 1hexo g 启动本地服务,就可以进行本地预览了,启动之后这个窗口不能关闭,不然博客无法访问 1hexo s 这个时候我们就可以在浏览器输入:http://127.0.0.1:4000进行访问我们的博客了,但是此时博客还是只在我们本地上,想要在外网可以访问还需要将博客发布到GitHub上 5、部署本地网站到GitHub1)、设置GitHub和git首先,需要将你的git连接上你的GitHub 在Git Bash here命令行窗口输入GitHub中设置的用户名和关联邮箱进行本地git设置 12git config --global user.name \"your name\" git config --global user.email your_email@youremail.com 在本机上生成ssh的密钥用于GitHub登陆(your_email@youremail.com改为自己在GitHub绑定的邮箱) 1ssh-keygen -t rsa -C your_email@youremail.com 然后一路回车,系统会自动将生成的公钥和私钥文件保存在C:\\Users\\siworae.ssh文件夹里面(siworae为自己的电脑用户名) .ssh为隐藏文件夹,需要开启显示隐藏文件才能看到 在文件夹里面找到id_rsa.pub文件,用记事本或者notepad打开,复制. 打开GitHub登陆,点击settings 在SSH Keys/Add new界面中,title填写标题,可随意,key一栏填写刚刚复制的id_rsa.pub文件里面的内容.点击页面下面的Add SSH key就添加成功了 2)、配置hexo配置文件在hexo安装根目录下找到_config.yml文件. 用记事本或者notepad打开,在最后面添加GitHub的信息 注意在hexo所有的配置文件中,冒号后面都需要跟一个空格,不然会报错 repository填写你的仓库地址,在创建完仓库之后就会跳转到这个界面,选择SSH.复制路径 1234deploy: type: git repository: git@github.com:siworae/siworae.github.io.git branch: master 这个时候你的GitHub已经和hexo关联起来了 12hexo gheox d 将本地代码推送到GitHub上,然后你可以到GitHub仓库看看代码是否已经推送成功.成功之后你就可以通过siworaer.GitHub.io网址来访问自己的博客了 6、主题安装进入hexo目录.打开git命令行窗口,执行以下命令将主题文件下载至hexo/themes目录,这里我已安装BlueLake主题为例,具体主题可以到官网下载https://hexo.io/themes/ 1git clone https://github.com/chaooo/hexo-theme-BlueLake.git hexo安装根目录下找到_config.yml文件,将landscape改为BlueLake 12#theme: landscapetheme: BlueLake 清除缓存并重新生成静态文件 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 打开浏览器就可以查看新的主题效果了 具体的主题设置可以参照官方文档https://github.com/chaooo/hexo-theme-BlueLake#bluelake 7、修改站点配置信息hexo安装根目录下找到_config.yml文件 1)、设置语言 1language: zh-CN 2)、设置个人信息 12345title: ##标题subtitle: ##副标题description: ##简要描述keywords: ##关键字author: ##作者信息 然后重新推送到GitHub上,然后你的个人博客基本上就大功告成了.","tags":[{"name":"hexo","slug":"hexo","permalink":"https://siworae.github.io/tags/hexo/"}]}]